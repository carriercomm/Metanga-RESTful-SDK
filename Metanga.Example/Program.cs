using System;
using System.Collections.Generic;
using System.Configuration;
using System.Globalization;
using System.Net.Http;
using Metanga.SoftwareDevelopmentKit.Proxy;
using Metanga.SoftwareDevelopmentKit.Rest;
using Newtonsoft.Json.Linq;

namespace Metanga.Example
{
  /// <summary>
  /// Executes Metanga SDK Examples
  /// </summary>
  internal class Program
  {
    /// <summary>
    /// Main entry point
    /// </summary>
    /// <param name="args">No arguments are required</param>
    private static void Main(string[] args)
    {
      Console.WriteLine("Opening connection to Metanga...");
      var client = OpenMetangaClient();
      if (client == null)
      {
        EndExample();
        return;
      }

      Console.WriteLine("Running Enrollment Example...");
      EnrollmentExample(client);
      Console.WriteLine("Closing connection to Metanga...");
      CloseMetangaClient(client);
      EndExample();
    }

    /// <summary>
    /// Enrolls an account to a predefined package. Then shows invoice information.
    /// </summary>
    /// <param name="client">A Metanga client that has been initialized.</param>
    private static void EnrollmentExample(MetangaClient client)
    {
      // Generate an id that will be different for each execution of this example
      var externalAccountId = DateTime.Now.Ticks.ToString(CultureInfo.InvariantCulture);
      var externalSubscriptionId = DateTime.Now.Ticks.ToString(CultureInfo.InvariantCulture);

      // Populate an account and a subscription.
      var account = CreateAccount(externalAccountId);
      var subscription = CreateSubscription(externalAccountId, externalSubscriptionId);

      // Create a credit card in Payment Broker and add the token to the account
      var creditCardToken = CreateCreditCardInPaymentBroker(account);
      account.PaymentInstruments = new[] {new CreditCardMasked {InstrumentId = creditCardToken}};

      bool enrollmentSucceeded;
      Invoice invoice = null;
      try
      {
        // Create the account and the subscription. An initial invoice will be generated by
        // Metanga if the package has activation fees or recurring charges.
        invoice = client.Enroll(subscription, account, InvoiceAction.InvoiceNow);
        enrollmentSucceeded = true;
      }
      catch (MetangaException e)
      {
        Console.WriteLine("An error has occurred during enrollment: Id={0}, Message={1}", e.ErrorId, e.Message);
        enrollmentSucceeded = false;
      }

      if (!enrollmentSucceeded) return;

      Console.WriteLine("Account has been successfully enrolled. Account Id: {0}", externalAccountId);
      if (invoice == null) return;

      Console.WriteLine("An invoice has been created for {0} {1}", invoice.InvoiceCurrency,
                        invoice.InvoiceSalesAmount + invoice.InvoiceTaxAmount);
      foreach (var charge in invoice.Charges)
      {
        if (!charge.Product.EntityId.HasValue) throw new InvalidOperationException("Product in Charge element has no EntityId"); // should not happen!
        var product = client.RetrieveEntity<Product>(charge.Product.EntityId.Value);
        Console.WriteLine("  - {0}: {1} {2}", product.Name["en-us"], invoice.InvoiceCurrency, charge.ChargeAmount);
      }
    }

    /// <summary>
    /// Creates a credit card in the payment broker. The account object provides contact information to be
    /// associated to the credit card. This method sets hardcoded values for the credit card.
    /// In a production scenario, this method should not be invoked from a server that is not PCI compliant.
    /// Instead, it should be implemented in JavaScript and executed directly from the end user's browser.
    /// </summary>
    /// <param name="account"></param>
    /// <returns></returns>
    private static Guid CreateCreditCardInPaymentBroker(Account account)
    {
      var paymentBrokerAddress = ConfigurationManager.AppSettings["PaymentBrokerAddress"];
      const string creditCardNumber = "4111111111111111";
      const string creditCardType = "Visa";
      const string cardVerificationNumber = "123";
      const string cardExpiration = "12/2018";

      // Send request to payment broker to obtain a credit card token
      return CreditCard.CreateCreditCard(paymentBrokerAddress, account.Address1, "", "",
                                         cardVerificationNumber, account.City, account.Country,
                                         creditCardNumber, creditCardType,
                                         account.Email, cardExpiration, account.FirstName,
                                         account.LastName, account.MiddleInitial, account.PhoneNumber,
                                         account.Zip, account.State);
    }

    /// <summary>
    /// Populate an account object with some hardcoded values
    /// </summary>
    /// <param name="externalAccountId">An external id that can be used to subsequently retrieve, update, or delete the account</param>
    /// <returns></returns>
    private static SampleAccount CreateAccount(string externalAccountId)
    {
      return new SampleAccount
               {
                 ExternalId = externalAccountId,
                 Name = new Dictionary<string, string> {{"en-us", externalAccountId}},
                 FirstName = "John",
                 MiddleInitial = "M",
                 LastName = "Jones",
                 Email = "john@mycompany.com",
                 Language = "en-us",
                 Address1 = "50 Main Street",
                 City = "Waltham",
                 State = "MA",
                 Zip = "02451",
                 Country = "US",
                 PhoneNumber = "555-555-5555",
                 BillingCycleUnit = "MO", // Monthly
                 BillingCycleEndDate = new DateTime(2012, 1, 31), // Last Day of Month
                 Currency = "USD",
                 Payer = new Account {ExternalId = externalAccountId} // Self-Paid
               };
    }

    /// <summary>
    /// Populates a subscription object with some hardcoded values.
    /// </summary>
    /// <param name="externalAccountId">The external id of the account that is being subscribed</param>
    /// <param name="externalSubscriptionId">An external id that can be used to subsequently retrieve, update, or delete the subscription</param>
    /// <returns></returns>
    private static SampleSubscription CreateSubscription(string externalAccountId, string externalSubscriptionId)
    {
      // These are the identifiers of a package and a product in Metanga's demo database.
      var packageId = new Guid("7923810c-8c96-4ff6-ac11-adae1303d8c3");
      var productId = new Guid("5ae6e359-2534-474f-8e48-1906f6f158fc");
      // This product is for a cloud storage product, priced at $10 / Megabit / Mo.
      // Enroll this customer for 5 Megabits (a more realistic example would use Gigabytes!)
      const int quantity = 5;
      const string unit = "MABIT";

      // Start enrollment on August 1st, 2012
      var enrollmentDate = new DateTime(2012, 8, 1);

      // Assemble the subscription object
      var subscriptionPackageProduct = new SubscriptionPackageProduct
      {
        Product = new Product { EntityId = productId },
        Quantity = quantity,
        UnitId = unit,
        StartDate = enrollmentDate
      };

      var subscriptionPackageProducts = new[] { subscriptionPackageProduct };

      return new SampleSubscription
      {
        ExternalId = externalSubscriptionId,
        Account = new Account { ExternalId = externalAccountId },
        Package = new Package { EntityId = packageId },
        RecurringCycleUnitId = "MO",
        SubscriptionPackageProducts = subscriptionPackageProducts
      };
    }

    /// <summary>
    /// Opens a connection to the Metanga service. If there is a MetangaException, it
    /// displays an appropriate message in the console.
    /// </summary>
    /// <returns></returns>
    private static MetangaClient OpenMetangaClient()
    {
      var metangaAddress = ConfigurationManager.AppSettings["MetangaAddress"];
      var username = ConfigurationManager.AppSettings["MetangaUsername"];
      var password = ConfigurationManager.AppSettings["MetangaPassword"];
      var address = new Uri(metangaAddress, UriKind.Absolute);
      MetangaClient client;
      try
      {
        client = MetangaClient.Initialize(address, username, password, MetangaContentType.Json);
      }
      catch (MetangaException e)
      {
        Console.WriteLine("An error has occurred while connecting to Metanga: Id={0}, Message={1}", e.ErrorId, e.Message);
        return null;
      }
      return client;
    }

    /// <summary>
    /// Closes the connection to the Metanga service. If there is a MetangaException, it
    /// displays an appropriate message in the console.
    /// </summary>
    /// <param name="client">The MetangaClient to be closed</param>
    private static void CloseMetangaClient(MetangaClient client)
    {
      try
      {
        client.Close();
      }
      catch (MetangaException e)
      {
        Console.WriteLine("An error has occurred while closing connection to Metanga: Id={0}, Message={1}", e.ErrorId,
                          e.Message);
      }
    }

    /// <summary>
    /// Before exiting, ask a user to press a key to finish and wait for the key.
    /// Very useful when running from Visual Studio
    /// </summary>
    private static void EndExample()
    {
      Console.WriteLine("Press any key to finish");
      Console.ReadKey();
    }
  }

  /// <summary>
  /// A helper class to create a credit card in Payment Broker
  /// </summary>
  public static class CreditCard
  {
    /// <summary>
    /// A helper method to create a credit card in Payment Broker
    /// </summary>
    /// <param name="paymentBrokerAddress">The URL to payment broker</param>
    /// <param name="address1">CC Contact Address, Line 1</param>
    /// <param name="address2">CC Contact Address, Line 2</param>
    /// <param name="address3">CC Contact Address, Line 3</param>
    /// <param name="cardVerificationNumber">The CCV is used to verify that the credit card number is not stolen</param>
    /// <param name="city">CC Contact Address, City</param>
    /// <param name="country">Should be a 2-letter ISO 3166-1 country code</param>
    /// <param name="creditCardNumber">CC Number</param>
    /// <param name="creditCardType">CC Type: Visa, Master Card, Discover, etc.</param>
    /// <param name="email">Email address</param>
    /// <param name="expirationDate">CC expiration date</param>
    /// <param name="firstName">CC Contact First Name</param>
    /// <param name="lastName">CC Contact Last Name</param>
    /// <param name="middleName">CC Contact Middle Name</param>
    /// <param name="phoneNumber">CC Contact Phone Number</param>
    /// <param name="postal">Zip or Postal Code</param>
    /// <param name="state">State or Province</param>
    /// <returns></returns>
    public static Guid CreateCreditCard(
      string paymentBrokerAddress,
      string address1,
      string address2,
      string address3,
      string cardVerificationNumber,
      string city,
      string country,
      string creditCardNumber,
      string creditCardType,
      string email,
      string expirationDate,
      string firstName,
      string lastName,
      string middleName,
      string phoneNumber,
      string postal,
      string state)
    {
      var createCreditCardQuery =
        paymentBrokerAddress +
        String.Format(CultureInfo.InvariantCulture,
                      "/paymentmethod/creditcard?address1={0}&address2={1}&address3={2}&cardVerificationNumber={3}&city={4}&country={5}&creditCardNumber={6}&creditCardType={7}&email={8}&expirationDate={9}&firstName={10}&lastName={11}&middleName={12}&phoneNumber={13}&postal={14}&state={15}",
                      address1,
                      address2,
                      address3,
                      cardVerificationNumber,
                      city,
                      country,
                      creditCardNumber,
                      creditCardType,
                      email,
                      expirationDate,
                      firstName,
                      lastName,
                      middleName,
                      phoneNumber,
                      postal,
                      state
          );

      var metangaUri = new Uri(createCreditCardQuery);
      using (var httpClient = new HttpClient())
      {
        httpClient.DefaultRequestHeaders.Add("Accept", "application/json");
        using (var response = httpClient.GetAsync(metangaUri))
        using (var responseTask = response.Result.Content.ReadAsStringAsync())
        {
          var responseJson = JToken.Parse(responseTask.Result);
          return responseJson["ResponseValue"].ToObject<Guid>();
        }
      }
    }
  }
}